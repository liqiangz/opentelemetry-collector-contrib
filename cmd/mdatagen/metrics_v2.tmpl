// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by mdatagen. DO NOT EDIT.

package {{ .Package }}

import (
	"time"

	"go.opentelemetry.io/collector/model/pdata"
)

// MetricSettings provides common settings for a particular metric.
type MetricSettings struct {
	Enabled bool `mapstructure:"enabled"`
}

// MetricsSettings provides settings for {{ .Name }} metrics.
type MetricsSettings struct {
	{{- range $name, $metric := .Metrics }}
	{{ $name.Render }} MetricSettings `mapstructure:"{{ $name }}"`
	{{- end }}
}

func DefaultMetricsSettings() MetricsSettings {
	return MetricsSettings{
		{{- range $name, $metric := .Metrics }}
		{{ $name.Render }}: MetricSettings{
			Enabled: {{ $metric.Enabled }},
		},
		{{- end }}
	}
}

type metrics struct {
	{{- range $name, $metric := .Metrics }}
	{{ $name.Render }} pdata.Metric
	{{- end }}
}

// MetricsBuilder provides an interface for scrapers to report metrics while taking care of all the transformations
// required to produce metric representation defined in metadata and user configuration.
type MetricsBuilder struct {
	config                              MetricsSettings
	startTime                           pdata.Timestamp
	{{ range $attr, $_ := .Attributes -}}
	attribute{{ $attr.Render }}Capacity int
	{{ end -}}
	metrics                             metrics
}

// metricBuilderOption applies changes to default metrics builder.
type metricBuilderOption func(*MetricsBuilder)

// WithStartTime sets startTime on the metrics builder.
func WithStartTime(startTime pdata.Timestamp) metricBuilderOption {
	return func(mb *MetricsBuilder) {
		mb.startTime = startTime
	}
}

{{ range $attr, $_ := .Attributes -}}
// WithAttribute{{ $attr.Render }}Capacity sets an expected number of values of {{ $attr }} attribute that will be
// used to calculate data points capacity for each metric report.
func WithAttribute{{ $attr.Render }}Capacity(cap int) metricBuilderOption {
	return func(mb *MetricsBuilder) {
		mb.attribute{{ $attr.Render }}Capacity = cap
	}
}

{{ end -}}

func NewMetricsBuilder(config MetricsSettings, options ...metricBuilderOption) *MetricsBuilder {
	mb := &MetricsBuilder{
		config:                              config,
		startTime:                           pdata.NewTimestampFromTime(time.Now()),
		{{- range $name, $info := .Attributes }}
		{{- if $info.Enum }}
		attribute{{ $name.Render }}Capacity: {{ len $info.Enum }},
		{{- end }}
		{{- end }}
	}

	for _, op := range options {
		op(mb)
	}

	mb.clearMetrics()
	return mb
}

// Emit appends generated metrics to a pdata.MetricsSlice and updates the internal state to be ready for recording
// another set of data points. This function will be doing all transformations required to produce metric representation
// defined in metadata and user configuration, e.g. delta/cumulative translation.
func (mb *MetricsBuilder) Emit(metrics pdata.MetricSlice) {
	{{- range $name, $metric := .Metrics }}
	if mb.config.{{- $name.Render }}.Enabled {
		mb.metrics.{{- $name.Render }}.CopyTo(metrics.AppendEmpty())
	}
	{{- end }}

	// Reset metric data points collection.
	mb.clearMetrics()
}

{{ range $name, $metric := .Metrics -}}
{{ if $metric.Attributes -}}
// {{ $name.RenderUnexported }}DataPointsCapacity calculates initial data points capacity for {{ $name }} metric.
func (mb *MetricsBuilder) {{ $name.RenderUnexported }}DataPointsCapacity() int {
	return {{ range $idx, $attr := $metric.Attributes -}}
	{{- if $idx }} * {{ end -}}
	mb.attribute{{ $attr.Render }}Capacity
	{{- end }}
}
{{- end }}

// {{ $name.RenderUnexported }}Metric builds new {{ $name }} metric.
func (mb *MetricsBuilder) {{ $name.RenderUnexported }}Metric() pdata.Metric {
	metric := pdata.NewMetric()
	metric.SetName("{{ $name }}")
	metric.SetDescription("{{ $metric.Description }}")
	metric.SetUnit("{{ $metric.Unit }}")
	metric.SetDataType(pdata.MetricDataType{{ $metric.Data.Type }})
	{{- if $metric.Data.HasMonotonic }}
	metric.{{ $metric.Data.Type }}().SetIsMonotonic({{ $metric.Data.Monotonic }})
	{{- end }}
	{{- if $metric.Data.HasAggregated }}
	metric.{{ $metric.Data.Type }}().SetAggregationTemporality({{ $metric.Data.Aggregated.Type }})
	{{- end }}
	{{- if $metric.Attributes }}
	metric.{{ $metric.Data.Type }}().DataPoints().EnsureCapacity(mb.{{ $name.RenderUnexported }}DataPointsCapacity())
	{{- end }}
	return metric
}

{{ end -}}

// clearMetrics clears metrics structure.
func (mb *MetricsBuilder) clearMetrics() {
	{{- range $name, $metric := .Metrics }}
	if mb.config.{{- $name.Render }}.Enabled {
		// TODO: Use mb.metrics.{{ $name.Render }}.{{ $metric.Data.Type }}().DataPoints().Clear() instead of rebuilding
		// the metrics once the Clear method is available.
		mb.metrics.{{ $name.Render }} = mb.{{ $name.RenderUnexported }}Metric()
	}
	{{- end }}
}

{{ range $name, $metric := .Metrics -}}
// Record{{ $name.Render }}DataPoint adds a data point to {{ $name }} metric.
// Any attribute of AttributeValueTypeEmpty type will be skipped.
func (mb *MetricsBuilder) Record{{ $name.Render }}DataPoint(ts pdata.Timestamp
	{{- if $metric.Data.HasNumberDataPoints}}, val {{ $metric.Data.NumberDataPoints.BasicType }}{{ end }}
	{{- range $metric.Attributes -}}, {{ . }}AttributeValue string {{ end }}) {
	if !mb.config.{{- $name.Render }}.Enabled {
		return
	}

	dp := mb.metrics.{{ $name.Render }}.{{ $metric.Data.Type }}().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(mb.startTime)
	dp.SetTimestamp(ts)
	{{- if $metric.Data.HasNumberDataPoints}}
	dp.Set{{ $metric.Data.NumberDataPoints.Type }}Val(val)
	{{- end }}
	{{ range $metric.Attributes -}}
	dp.Attributes().Insert(A.{{ .Render }}, pdata.NewAttributeValueString({{ . }}AttributeValue))
	{{ end -}}
}
{{ end }}

// Attributes contains the possible metric attributes that can be used.
var Attributes = struct {
{{- range $name, $info := .Attributes }}
	// {{ $name.Render }} ({{ $info.Description }})
	{{ $name.Render }} string
{{- end }}
}{
{{- range $name, $info := .Attributes }}
	{{- if $info.Value }}
	"{{ $info.Value }}",
	{{- else }}
	"{{ $name }}",
	{{- end }}
{{- end }}
}

// A is an alias for Attributes.
var A = Attributes

{{ range $name, $info := .Attributes -}}
{{ if $info.Enum -}}
// Attribute{{ $name.Render }} are the possible values that the attribute "{{ $name }}" can have.
var Attribute{{ $name.Render }} = struct {
{{- range $info.Enum }}
	{{ . | publicVar }} string
{{- end }}
}{
{{- range $info.Enum }}
	"{{ . }}",
{{- end }}
}
{{ end }}
{{ end }}
