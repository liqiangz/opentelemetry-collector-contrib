// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"time"

	"go.opentelemetry.io/collector/model/pdata"
)

// MetricSettings provides common settings for a particular metric.
type MetricSettings struct {
	Enabled bool `mapstructure:"enabled"`
}

// MetricsSettings provides settings for cpu metrics.
type MetricsSettings struct {
	SystemCPUTime MetricSettings `mapstructure:"system.cpu.time"`
}

func DefaultMetricsSettings() MetricsSettings {
	return MetricsSettings{
		SystemCPUTime: MetricSettings{
			Enabled: true,
		},
	}
}

type metrics struct {
	SystemCPUTime pdata.Metric
}

// MetricsBuilder provides an interface for scrapers to report metrics while taking care of all the transformations
// required to produce metric representation defined in metadata and user configuration.
type MetricsBuilder struct {
	config                 MetricsSettings
	startTime              pdata.Timestamp
	attributeCpuCapacity   int
	attributeStateCapacity int
	metrics                metrics
}

// metricBuilderOption applies changes to default metrics builder.
type metricBuilderOption func(*MetricsBuilder)

// WithStartTime sets startTime on the metrics builder.
func WithStartTime(startTime pdata.Timestamp) metricBuilderOption {
	return func(mb *MetricsBuilder) {
		mb.startTime = startTime
	}
}

// WithAttributeCpuCapacity sets an expected number of values of cpu attribute that will be
// used to calculate data points capacity for each metric report.
func WithAttributeCpuCapacity(cap int) metricBuilderOption {
	return func(mb *MetricsBuilder) {
		mb.attributeCpuCapacity = cap
	}
}

// WithAttributeStateCapacity sets an expected number of values of state attribute that will be
// used to calculate data points capacity for each metric report.
func WithAttributeStateCapacity(cap int) metricBuilderOption {
	return func(mb *MetricsBuilder) {
		mb.attributeStateCapacity = cap
	}
}

func NewMetricsBuilder(config MetricsSettings, options ...metricBuilderOption) *MetricsBuilder {
	mb := &MetricsBuilder{
		config:                 config,
		startTime:              pdata.NewTimestampFromTime(time.Now()),
		attributeStateCapacity: 8,
	}

	for _, op := range options {
		op(mb)
	}

	mb.clearMetrics()
	return mb
}

// Emit appends generated metrics to a pdata.MetricsSlice and updates the internal state to be ready for recording
// another set of data points. This function will be doing all transformations required to produce metric representation
// defined in metadata and user configuration, e.g. delta/cumulative translation.
func (mb *MetricsBuilder) Emit(metrics pdata.MetricSlice) {
	if mb.config.SystemCPUTime.Enabled {
		mb.metrics.SystemCPUTime.CopyTo(metrics.AppendEmpty())
	}

	// Reset metric data points collection.
	mb.clearMetrics()
}

// systemCPUTimeDataPointsCapacity calculates initial data points capacity for system.cpu.time metric.
func (mb *MetricsBuilder) systemCPUTimeDataPointsCapacity() int {
	return mb.attributeCpuCapacity * mb.attributeStateCapacity
}

// systemCPUTimeMetric builds new system.cpu.time metric.
func (mb *MetricsBuilder) systemCPUTimeMetric() pdata.Metric {
	metric := pdata.NewMetric()
	metric.SetName("system.cpu.time")
	metric.SetDescription("Total CPU seconds broken down by different states.")
	metric.SetUnit("s")
	metric.SetDataType(pdata.MetricDataTypeSum)
	metric.Sum().SetIsMonotonic(true)
	metric.Sum().SetAggregationTemporality(pdata.MetricAggregationTemporalityCumulative)
	metric.Sum().DataPoints().EnsureCapacity(mb.systemCPUTimeDataPointsCapacity())
	return metric
}

// clearMetrics clears metrics structure.
func (mb *MetricsBuilder) clearMetrics() {
	if mb.config.SystemCPUTime.Enabled {
		// TODO: Use mb.metrics.SystemCPUTime.Sum().DataPoints().Clear() instead of rebuilding
		// the metrics once the Clear method is available.
		mb.metrics.SystemCPUTime = mb.systemCPUTimeMetric()
	}
}

// RecordSystemCPUTimeDataPoint adds a data point to system.cpu.time metric.
// Any attribute of AttributeValueTypeEmpty type will be skipped.
func (mb *MetricsBuilder) RecordSystemCPUTimeDataPoint(ts pdata.Timestamp, val float64, cpuAttributeValue string, stateAttributeValue string) {
	if !mb.config.SystemCPUTime.Enabled {
		return
	}

	dp := mb.metrics.SystemCPUTime.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(mb.startTime)
	dp.SetTimestamp(ts)
	dp.SetDoubleVal(val)
	dp.Attributes().Insert(A.Cpu, pdata.NewAttributeValueString(cpuAttributeValue))
	dp.Attributes().Insert(A.State, pdata.NewAttributeValueString(stateAttributeValue))
}

// Attributes contains the possible metric attributes that can be used.
var Attributes = struct {
	// Cpu (CPU number starting at 0.)
	Cpu string
	// State (Breakdown of CPU usage by type.)
	State string
}{
	"cpu",
	"state",
}

// A is an alias for Attributes.
var A = Attributes

// AttributeState are the possible values that the attribute "state" can have.
var AttributeState = struct {
	Idle      string
	Interrupt string
	Nice      string
	Softirq   string
	Steal     string
	System    string
	User      string
	Wait      string
}{
	"idle",
	"interrupt",
	"nice",
	"softirq",
	"steal",
	"system",
	"user",
	"wait",
}
